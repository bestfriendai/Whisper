rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
        request.resource.size < 10 * 1024 * 1024; // Max 10MB
    }
    
    function isValidVideoFile() {
      return request.resource.contentType.matches('video/.*') &&
        request.resource.size < 100 * 1024 * 1024; // Max 100MB
    }
    
    function isValidDocument() {
      return request.resource.contentType.matches('application/pdf') &&
        request.resource.size < 5 * 1024 * 1024; // Max 5MB
    }
    
    function hasVerifiedEmail() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    function isNotBanned() {
      return isAuthenticated() && 
        !firestore.exists(/databases/(default)/documents/banned_users/$(request.auth.uid));
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Public profile images
      allow write: if isOwner(userId) && 
        hasVerifiedEmail() && 
        isNotBanned() &&
        isValidImageFile() &&
        fileName.matches('.*\\.(jpg|jpeg|png|gif|webp)$');
      allow delete: if isOwner(userId);
    }
    
    // User avatar thumbnails (generated by cloud functions)
    match /users/{userId}/avatars/{size}/{fileName} {
      allow read: if true;
      allow write: if false; // Only cloud functions can write
    }
    
    // Review images
    match /reviews/{reviewId}/images/{imageId} {
      allow read: if true; // Public review images
      allow create: if isAuthenticated() && 
        hasVerifiedEmail() && 
        isNotBanned() &&
        isValidImageFile() &&
        // Check if user owns the review
        firestore.get(/databases/(default)/documents/reviews/$(reviewId)).data.authorId == request.auth.uid;
      allow update: if false; // Images cannot be updated
      allow delete: if isAuthenticated() &&
        firestore.get(/databases/(default)/documents/reviews/$(reviewId)).data.authorId == request.auth.uid;
    }
    
    // Chat attachments
    match /chats/{chatId}/attachments/{attachmentId} {
      allow read: if isAuthenticated() &&
        // Check if user is participant in the chat
        firestore.get(/databases/(default)/documents/chat_rooms/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow create: if isAuthenticated() && 
        hasVerifiedEmail() && 
        isNotBanned() &&
        (isValidImageFile() || isValidDocument()) &&
        firestore.get(/databases/(default)/documents/chat_rooms/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow update: if false;
      allow delete: if isAuthenticated() &&
        resource.metadata['uploadedBy'] == request.auth.uid;
    }
    
    // Verification documents (for account verification)
    match /verification/{userId}/documents/{documentId} {
      allow read: if isOwner(userId) || 
        request.auth.token.role in ['admin', 'moderator'];
      allow create: if isOwner(userId) && 
        hasVerifiedEmail() && 
        isNotBanned() &&
        (isValidImageFile() || isValidDocument());
      allow update: if false;
      allow delete: if isOwner(userId) || 
        request.auth.token.role == 'admin';
    }
    
    // Temporary uploads (cleaned up after 24 hours by cloud function)
    match /temp/{userId}/{fileName} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && 
        isNotBanned() &&
        request.resource.size < 50 * 1024 * 1024; // Max 50MB
      allow update: if false;
      allow delete: if isOwner(userId);
    }
    
    // App assets (logos, backgrounds, etc.)
    match /assets/{assetPath=**} {
      allow read: if true; // Public assets
      allow write: if request.auth.token.role == 'admin';
    }
    
    // Content moderation quarantine
    match /quarantine/{contentId}/{fileName} {
      allow read: if request.auth.token.role in ['admin', 'moderator'];
      allow write: if false; // Only cloud functions can write
    }
    
    // Backup folder (admin only)
    match /backups/{backupPath=**} {
      allow read: if request.auth.token.role == 'admin';
      allow write: if false; // Only cloud functions/admin tools can write
    }
    
    // Reports evidence
    match /reports/{reportId}/evidence/{fileName} {
      allow read: if isAuthenticated() &&
        (firestore.get(/databases/(default)/documents/reports/$(reportId)).data.reporterId == request.auth.uid ||
         request.auth.token.role in ['admin', 'moderator']);
      allow create: if isAuthenticated() && 
        hasVerifiedEmail() && 
        isNotBanned() &&
        isValidImageFile() &&
        firestore.get(/databases/(default)/documents/reports/$(reportId)).data.reporterId == request.auth.uid;
      allow update: if false;
      allow delete: if request.auth.token.role == 'admin';
    }
    
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}